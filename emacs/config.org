#+TITLE: GNU Emacs Config
#+AUTHOR: Marc Murray
#+DESCRIPTION: Marc's Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#evil-mode][Evil Mode]]
- [[#general-keybindings][General Keybindings]]
  - [[#editing-keybindings][Editing Keybindings]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#backups][BACKUPS]]
- [[#correcting-code-and-text][CORRECTING CODE AND TEXT]]
  - [[#flycheck][Flycheck]]
- [[#company][COMPANY]]
- [[#dashboard][DASHBOARD]]
- [[#dired][DIRED]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting The Font Face]]
  - [[#zooming-in-and-out][Zooming In And Out]]
  - [[#centering-the-cursor][Centering The Cursor]]
- [[#gui-tweaks][GUI TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers And Truncated Lines]]
  - [[#olivetti-mode][Olivetti Mode]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#latex][LaTeX]]
- [[#minibuffer-escape][MINIBUFFER ESCAPE]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG-MODE]]
  - [[#appearance][Appearance]]
  - [[#agenda][Agenda]]
  - [[#enabling-table-of-contents][Enabling Table Of Contents]]
  - [[#org-faces][Org Faces]]
  - [[#source-code-block-expansion][Source Code Block Expansion]]
- [[#programming-languages][PROGRAMMING LANGUAGES]]
- [[#sane-defaults][SANE DEFAULTS]]
- [[#theme][THEME]]
- [[#transparency][TRANSPARENCY]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
			:ref nil :depth 1
			:files (:defaults "elpaca-test.el" (:exclude "extensions"))
			:build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
 (build (expand-file-name "elpaca/" elpaca-builds-directory))
 (order (cdr elpaca-order))
 (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
	   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
					   ,@(when-let ((depth (plist-get order :depth)))
					       (list (format "--depth=%d" depth) "--no-single-branch"))
					   ,(plist-get order :repo) ,repo))))
	   ((zerop (call-process "git" nil buffer t "checkout"
				 (or (plist-get order :ref) "--"))))
	   (emacs (concat invocation-directory invocation-name))
	   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
				 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
	   ((require 'elpaca))
	   ((elpaca-generate-autoloads "elpaca" repo)))
      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
    (error "%s" (with-current-buffer buffer (buffer-string))))
((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  ;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :ensure t :demand t)
;;(elpaca-wait)

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
    :ensure t
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
          evil-want-keybinding nil
          evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
    (evil-mode))

;; Using RETURN to follow links in Org/Evil 
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))

;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)
#+end_src

* General Keybindings
#+begin_src emacs-lisp
;; Set super key to meta
(setq x-super-keysym 'meta)
;; Split windows
(global-set-key (kbd "M-I") 'split-window-right)
(global-set-key (kbd "M-U") 'split-window-below)
(global-set-key (kbd "M-H") '(lambda() (interactive) (other-window -1)))
(global-set-key (kbd "M-L") 'other-window)
(global-set-key (kbd "M-C") 'delete-window)
(global-set-key (kbd "M-l") 'org-do-demote)
(define-key org-mode-map (kbd "M-h") nil)
(global-set-key (kbd "M-h") 'org-do-promote)
(global-set-key (kbd "M-k") 'org-move-subtree-up)
(global-set-key (kbd "M-j") 'org-move-subtree-down)
;; Neotree
(global-set-key [f8] 'neotree-toggle)
;; General keybindings
(use-package general
  :config
  (general-evil-setup)

;; set up 'SPC' as the global leader key
(general-create-definer marc/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC" ;; set leader
  :global-prefix "M-SPC") ;; access leader in insert mode

(marc/leader-keys
  "." '(find-file :wk "Find file")
  "f c" '((lambda () (interactive) (find-file "~/.dotfiles/emacs/config.org")) :wk "Edit emacs config")
  "f w" '((lambda () (interactive) (find-file "~/Documents/Work")) :wk "Open work directory")
  "f a" '((lambda () (interactive) (find-file "~/Documents/Work/Agenda.org")) :wk "Open Agenda file")
  "TAB TAB" '(comment-line :wk "Comment lines"))

(marc/leader-keys
  "b" '(:ignore t :wk "buffer")
  "b b" '(switch-to-buffer :wk "Switch buffer")
  "b i" '(ibuffer :wk "Ibuffer")
  "b k" '(kill-this-buffer :wk "Kill this buffer")
  "b n" '(next-buffer :wk "Next buffer")
  "b p" '(previous-buffer :wk "Previous buffer")
  "b r" '(revert-buffer :wk "Reload buffer"))

(marc/leader-keys
  "e" '(:ignore t :wk "Evaluate")    
  "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
  "e d" '(eval-defun :wk "Evaluate defun containing or after point")
  "e e" '(eval-expression :wk "Evaluate and elisp expression")
  "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
  "e r" '(eval-region :wk "Evaluate elisp in region")) 

 (marc/leader-keys
  "h" '(:ignore t :wk "Help")
  "h f" '(describe-function :wk "Describe function")
  "h v" '(describe-variable :wk "Describe variable")
  "h r r" '((lambda () (interactive) (load-file "~/.dotfiles/emacs/init.el")) :wk "Reload emacs config"))

 (marc/leader-keys
  "m" '(:ignore t :wk "Org")    
  "m a" '(org-agenda :wk "Org agenda")    
  "m c" '(org-toggle-checkbox :wk "Org toggle")    
  "m t" '(org-time-stamp :wk "Org time stamp")
  "m k" '(org-todo :wk "Org todo")
  "m q" '(org-set-tags-command :wk "Org set tag"))
)
#+end_src

** Editing Keybindings
#+begin_src emacs-lisp
(use-package key-chord
  :ensure t
  :init
  (key-chord-mode 1)
  (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state))
 (use-package evil-numbers
   :ensure t
   :init
   (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
   (define-key evil-visual-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
   (define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
   (define-key evil-visual-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
 )
#+end_src

* ALL THE ICONS
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* BACKUPS
Moves automatic emacs backups to the =TRASH= directory.
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

* CORRECTING CODE AND TEXT
** Flycheck
For correcting code.
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

* COMPANY
Code completion.
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :ensure t
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* DASHBOARD
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "I didn't say enjoy your breakfast. I said eat it.")
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-center-content t)
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

* DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :ensure t
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))
#+end_src

* FONTS
** Setting The Font Face
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; Adjust line spacing.
(setq-default line-spacing 0.12)
#+end_src

** Zooming In And Out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Centering The Cursor
#+begin_src emacs-lisp
(use-package centered-cursor-mode
  :ensure t
  :init
  (global-centered-cursor-mode 1)
  )
#+end_src

* GUI TWEAKS
** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers And Truncated Lines
#+begin_src emacs-lisp
;;(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** Olivetti Mode
#+begin_src emacs-lisp
#+end_src

* IVY (COUNSEL)
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :ensure t
  :config (counsel-mode))

(use-package ivy
  :ensure t
  :diminish
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src

<<<<<<< HEAD
* LaTeX
#+begin_src emacs-lisp
#+end_src

=======
>>>>>>> 6d1676fa6d4dde0e449940ae8b4ff30469b1f7e1
* MINIBUFFER ESCAPE
#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* NEOTREE
#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t))
#+end_src

* ORG-MODE
** Appearance
#+begin_src emacs-lisp
(use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
(setq org-startup-folded t)
#+end_src
** Agenda
*** General Settings
#+begin_src emacs-lisp
(setq org-agenda-span 1
      org-agenda-start-day "+0d"
      org-agenda-skip-timestamp-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-skip-timestamp-if-deadline-is-shown t)

(setq org-agenda-prefix-format '(
(agenda . "  %?-2i %t ")
 (todo . " %i %-12:c")
 (tags . " %i %-12:c")
 (search . " %i %-12:c")))

(setq org-agenda-hide-tags-regexp ".*")

(setq org-agenda-current-time-string "")
(setq org-agenda-time-grid '((daily) () "" ""))
#+end_src
*** Super Agenda
#+begin_src emacs-lisp
(setq org-super-agenda-groups
       '(
        (:name "Business" :tag "@business")
        (:name "Academics" :tag "@academics")
        (:name "Activities" :tag "@activities")
        (:name "Piano" :tag "@piano")
        (:name "Essays" :tag "@essays")
        ))

(use-package org-super-agenda
  :ensure t
  :after org
  :defer t
  :init
(org-super-agenda-mode))
#+end_src
*** Tags And TODO Keywords
#+begin_src emacs-lisp
(setq org-tag-persistent-alist '((:startgroup . nil)
                      ("@business" . ?b) ("@academics" . ?a)
                      ("@essays" . ?e) ("@piano" . ?p)
		      ("@activities" . ?g)
                      (:endgroup . nil)
                      ))
(setq org-todo-keywords '((sequence "TODO(t)" "PROJ(p)" "NEXT(n)" "EVNT(e)" "|" "DONE(d)")))
#+end_src
** Enabling Table Of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org Faces
#+begin_src emacs-lisp
(custom-set-faces
  '(org-document-title ((t (:inherit outline-1 :height 1.5))))
  '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)
#+end_src

** Source Code Block Expansion
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* PROGRAMMING LANGUAGES
#+begin_src emacs-lisp
(use-package web-mode)
(use-package python-mode)
(use-package nix-mode
  :mode ("\\.nix\\'" "\\.nix.in\\'"))
(use-package emmet-mode)
#+end_src

* SANE DEFAULTS
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
(electric-pair-mode 1)
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(setq org-startup-indented t)
#+end_src

* THEME
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* TRANSPARENCY
#+begin_src emacs-lisp
;;(add-to-list 'default-frame-alist '(alpha-background . 80))
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode 1)
  :config
  (setq which-key-inside-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
        which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " → " ))
#+end_src
