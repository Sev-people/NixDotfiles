#+TITLE: GNU Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#elpaca][Elpaca]]
- [[#org-mode][Org mode]]
  - [[#setup-and-appearance][Setup and appearance]]
  - [[#variables][Variables]]
  - [[#agenda][Agenda]]
  - [[#getting-things-done][Getting Things Done]]
  - [[#table-of-contents][Table of contents]]
  - [[#source-code-block-expansion][Source code block expansion]]
- [[#keybindings][Keybindings]]
  - [[#evil-mode][Evil mode]]
  - [[#keybindings-1][Keybindings]]
- [[#coding-environment][Coding environment]]
  - [[#devshell-integration][devShell integration]]
  - [[#github-integration][Github integration]]
  - [[#programming-languages][Programming languages]]
  - [[#project-management][Project management]]
  - [[#project-navigation][Project navigation]]
  - [[#language-server-protocol][Language Server Protocol]]
- [[#denote][Denote]]
- [[#file-browsing][File browsing]]
- [[#fonts][Fonts]]
- [[#gui-tweaks][GUI tweaks]]
  - [[#general][General]]
  - [[#startup-screen][Startup screen]]
  - [[#zooming-in-and-out][Zooming in and out]]
- [[#keybinding-completion][Keybinding completion]]
- [[#latex][LaTeX]]
  - [[#exporting][Exporting]]
  - [[#setup][Setup]]
  - [[#latex-modes][LaTeX modes]]
  - [[#pdf-viewer][PDF viewer]]
- [[#mode-line][Mode line]]
- [[#sane-defaults][Sane defaults]]
  - [[#all-the-icons][All the icons]]
  - [[#general-1][General]]
- [[#terminal][Terminal]]
- [[#text-correction][Text correction]]
- [[#theme][Theme]]

* Elpaca
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Startup
(elpaca elpaca-use-package
 (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))
(elpaca-wait)
(use-package compat)
#+end_src

* Org mode
** Setup and appearance
#+begin_src emacs-lisp
(setq org-emphasis-regexp-components
      '("-—[:space:]('\"{"
	"-—[:space:].,:!?;'\")}\\["
	"[:space:]"
	"."
	1))

(require 'org)

(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)

(setq org-startup-folded t
      org-hide-emphasis-markers t
      org-return-follows-link t)
#+end_src
** Variables
#+begin_src emacs-lisp
;; GTD keywords
(defconst my/gtd-dest-map
  '(("projects.org"  . "PROJ")
    ("waiting.org"   . "WAIT")
    ("next.org"      . "NEXT")
    ("calendar.org"  . "TODO")
    ("reference/reference.org" . nil)
    ("someday.org"   . "IDEA"))
  "GTD file structure & keyword correspondance.")

;; GTD tags And TODO Keywords
(setq org-tag-persistent-alist '((:startgroup . nil)
                      ("@work" . ?w) ("@knowledge" . ?k)
                      ("@misc" . ?m) ("@academic" . ?a)
                      (:endgroup . nil)
                      ))
(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "FILE(f)" "PROJ(p)" "IDEA(i)" "WAIT(w)" "|" "DONE(d)")))

;;; GTD root and default notes file
(setq my/gtd-root (expand-file-name "~/Documents/work/organization/"))
(setq org-default-notes-file (expand-file-name "inbox.org" my/gtd-root))

;; Files used in agenda
(setq org-agenda-files `(
	,(expand-file-name "calendar.org" my/gtd-root)
	,(expand-file-name "agenda.org" my/gtd-root)
	"~/Documents/work/files/academics/25-26Q1/physics.org"
	"~/Documents/work/files/academics/25-26Q1/computation.org"
	"~/Documents/work/files/academics/25-26Q1/programming.org"
	"~/Documents/work/files/academics/25-26Q1/mathematics.org"))
#+end_src
** Agenda
#+begin_src emacs-lisp
;; General Settings
(setq org-agenda-span 1
org-agenda-start-day "+0d"
org-agenda-skip-timestamp-if-done t
org-agenda-skip-deadline-if-done t
org-agenda-skip-scheduled-if-done t
org-agenda-skip-scheduled-if-deadline-is-shown t
org-agenda-skip-timestamp-if-deadline-is-shown t)

;; Agenda views format
(setq org-agenda-prefix-format '(
(agenda . "  %?-2i %t ")
 (todo . " %i %-12:c")
 (tags . " %i %-12:c")
 (search . " %i %-12:c")))

(setq org-agenda-hide-tags-regexp ".*")

;; Settings for agenda views
(setq org-deadline-warning-days 0)
(setq org-agenda-current-time-string "")
(setq org-agenda-time-grid '((daily) () "" ""))
(setq org-agenda-start-on-weekday nil)

;; Custom agenda view
(setq org-agenda-custom-commands
      '(("x" "Custom Agenda"
         ;; Routine today
         ((agenda ""
                  ((org-agenda-span 1)
                   (org-agenda-entry-types '(:timestamp))
                   (org-agenda-overriding-header "Routine")))

          ;; TODOs scheduled today
          (agenda ""
                  ((org-agenda-span 1)
                   (org-agenda-entry-types '(:scheduled))
		   (org-agenda-show-current-time-in-grid nil)
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'nottodo 'any))
                   (org-agenda-overriding-header "Work Today")))

          ;; Deadlines in the next 7 days
          (agenda ""
                  ((org-agenda-span 7)
		   (org-agenda-files '("~/Documents/work/organization/calendar.org"))
		   (org-agenda-prefix-format '((agenda . "  %?-2i %t %s")))
		   (org-agenda-show-current-time-in-grid nil)
                   (org-agenda-entry-types '(:deadline :scheduled))
                   (org-agenda-overriding-header "Calendar")))))))
#+end_src
** Getting Things Done
#+begin_src emacs-lisp
;; Capture templates
(setq denote-org-capture-specifiers "%i\n%?")

(setq org-capture-templates
      `(("i" "Inbox" entry
         (file+headline ,(expand-file-name "inbox.org" my/gtd-root) "Inbox")
         "* FILE %^{Header|Entry} \n:PROPERTIES:\n:Captured: %u\n:End:\n%^{Description}%i" :immediate-finish t)))

;; Set deadline for GTD entries
(defun gtd-set-deadline ()
  "Set a deadline for a GTD project/task."
  (interactive)
  (org-up-heading-all 0)
  (let ((date (read-string "Deadline (empty to skip): ")))
    (unless (string-empty-p date)
      (org-deadline nil date)
      (let* ((calendarfile (expand-file-name "calendar.org" my/gtd-root))
	     (calendarheader "Calendar")
	     (pos (with-current-buffer (find-file-noselect calendarfile t)
		    (widen)
		    (or (org-find-exact-headline-in-buffer calendarheader)
			(user-error "No headline in %s" calendarfile)))))
	(org-refile 3 nil (list calendarheader calendarfile nil pos))
	(with-current-buffer (find-buffer-visiting calendarfile)
	  (save-buffer))))))
;; Refile GTD entries
(defun gtd-refile-with-keyword ()
  "Refile current heading to a GTD target file and update its TODO keyword."
  (interactive)
  (org-up-heading-all 0)
  (let* ((choice (completing-read "Move to: " (mapcar #'car my/gtd-dest-map))) ;; Prompt to choose GTD file
         (keyword (cdr (assoc choice my/gtd-dest-map))) ;; TODO keyword associated to chosen GTD file
	 (header (capitalize (string-remove-suffix ".org" choice))) ;; Maps filename.org to Filename
         (file (expand-file-name choice my/gtd-root)) ;; Chosen GTD file path
	 (nextaction ""))
    ;; Change TODO keyword
    (when keyword
      (org-todo keyword))
    (setq current-prefix-arg nil)
    ;; Project template
    (when (member choice '("projects.org"))
      (org-priority nil)
      (org-set-tags-command)
      (gtd-set-deadline))
    ;; Prompt for the next action
    (when (member choice '("next.org"))
      (while (string-blank-p nextaction) (setq nextaction (read-string "Next Action (cannot be empty): ")))
      (org-set-property "NextAction" nextaction)
      (org-priority nil)
      (org-set-tags-command))
    ;; Prompt for date
    (when (member choice '("calendar.org")) (org-schedule nil))
    ;; Refile header
    (let* ((pos (with-current-buffer (find-file-noselect file t)
		  (widen)
		  (or (org-find-exact-headline-in-buffer header)
                      (user-error "No headline in %s" file)))))
      (org-refile nil nil (list header file nil pos)))
    ;; Save current buffer
    (save-buffer)
    ;; Save buffer header is being moved to
    (setq target-buf (find-buffer-visiting file))
    (with-current-buffer target-buf
      (save-buffer))))

;; Project management
(require 'org-mouse)

(setq org-after-note-stored-hook
      (list
       (lambda ()
	 (org-up-heading-all 0)
	 (org-store-link t)
	 ;; Set NextAction
	 (let ((nextaction "") (priority (string-to-char (org-mouse-get-priority))) (tags (org-get-tags)) (link (substring-no-properties (org-store-link t))))
	   (while (string-blank-p nextaction) (setq nextaction (read-string "Next Action: ")))
	   (org-set-property "NextAction" nextaction)
	   ;; Add next.org entry
	   (let ((org-capture-templates
		  `(("x" "Project action" entry
		     (file+headline ,(expand-file-name "next.org" my/gtd-root) "Next")
		     "* NEXT %(identity nextaction) for: %(identity link)\n:PROPERTIES:\n:Captured: %u\n:End:\n%i" :immediate-finish t :before-finalize (lambda () (org-priority priority) (org-set-tags tags))))))
	     (org-capture nil "x"))))
       (save-buffer)))

(defun gtd-manage-project ()
  "Manage current GTD project."
  (interactive)
  (org-up-heading-all 0)
  ;; Add purpose and vision
  (unless (org-entry-get (point) "Purpose")
    (let ((purpose ""))
      (while (string-blank-p purpose) (setq purpose (read-string "Purpose: ")))
      (org-set-property "Purpose" purpose)))
  (unless (org-entry-get (point) "SuccessCriteria")
    (let ((criteria ""))
      (while (string-blank-p criteria) (setq criteria (read-string "Success Criteria: ")))
      (org-set-property "SuccessCriteria" criteria)))
  ;; Brainstorm
  (org-add-note))

;; Misc. settings
(add-hook 'org-todo-repeat-hook #'org-reset-checkbox-state-subtree) ;; To unmark checkboxes
(setq org-log-into-drawer t) ;; For timestamp logs
;; Remove timestamp logging when tasks are completed
(setq org-log-done nil)
(setq org-log-repeat nil)

;; GTD keybindings
(defun gtd-agenda ()
  "Open custom agenda view."
  (interactive)
  (org-agenda nil "x"))

(defun gtd-dir ()
  "Open GTD directory."
  (interactive)
  (find-file "~/Documents/work/organization"))

(defvar-keymap gtd-prefix-map
  :doc "GTD prefix key map."
  "c" #'org-capture
  "a" #'gtd-agenda
  "d" #'gtd-dir
  "p" #'gtd-manage-project
  "s" #'(let ((org-agenda-files 
	       '("~/Documents/work/files/academics/25-26Q1/physics.org"
		 "~/Documents/work/files/academics/25-26Q1/computation.org"
		 "~/Documents/work/files/academics/25-26Q1/programming.org"
		 "~/Documents/work/files/academics/25-26Q1/mathematics.org")))
	  (org-agenda nil "t"))
  "m" 'gtd-refile-with-keyword)

(keymap-set global-map "C-c d" gtd-prefix-map)
#+end_src
** Table of contents
#+begin_src emacs-lisp
(use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
** Source code block expansion
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* Keybindings
** Evil mode
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-undo-system 'undo-redo)
  :config
  (evil-mode 1))

;; Unbind motion-state keys that would interfere with custom keybindings (e.g., leader keys)
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)  ;; Unbind spacebar
  (define-key evil-motion-state-map (kbd "RET") nil)  ;; Unbind Return
  (define-key evil-motion-state-map (kbd "TAB") nil)) ;; Unbind Tab

;; EVIL COLLECTION — Vi keybindings across the Emacs ecosystem (Magit, Dired, Eshell, etc.)
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

;; FINE-TUNING EVIL BEHAVIOR (These are global variables, best set early)
(setq
 ;; Use Evil's own search module (not Emacs isearch) — enables `/` to behave as in Vim
 evil-search-module 'evil-search
 ;; Use Vim-style regular expressions for `evil-ex-search`
 evil-ex-search-vim-style-regexp t
 ;; More granular undo points (e.g., inserting `foo` triggers 3 undos: `f`, `o`, `o`)
 evil-want-fine-undo t
 ;; Ensure Evil integrates fully with Emacs core behavior
 evil-want-integration t)
#+end_src
** Keybindings
#+begin_src emacs-lisp
;; Set super key to meta
(setq x-super-keysym 'meta)

;; Evil mode escape sequence
(use-package evil-escape
  :ensure t
  :after evil
  :config
  (evil-escape-mode 1)
  (setq evil-escape-key-sequence "jk"))
#+end_src

* Coding environment
** devShell integration
#+begin_src emacs-lisp
(use-package direnv
  :ensure t
  :config
  (direnv-mode))
#+end_src
** Github integration
#+begin_src emacs-lisp
;; Magit dependency
(use-package transient
  :ensure t)

(use-package magit
  :defer t
  :commands (magit-status magit-blame))
#+end_src
** Programming languages
#+begin_src emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python3" . python-mode))

(use-package rust-mode
  :ensure t
  :mode "\\.rs\\'")

(add-to-list 'auto-mode-alist '("\\.js\\'" . js-mode))
(with-eval-after-load 'js
  (setq js-indent-level 2))

(use-package typescript-mode
  :ensure t
  :mode ("\\.ts\\'" "\\.tsx\\'")
  :config
  (setq typescript-indent-level 2))

(use-package json-mode
  :ensure t
  :mode "\\.json\\'")

(use-package yaml-mode
  :ensure t
  :mode "\\.ya?ml\\'")

(use-package toml-mode
  :ensure t
  :mode "\\.toml\\'")

(with-eval-after-load 'sh-script
  (setq sh-basic-offset 2
        sh-indentation 2))

(use-package nix-mode
  :ensure t
  :mode "\\.nix\\'")

(with-eval-after-load 'cc-mode
  (setq c-basic-offset 4
        tab-width 4
        indent-tabs-mode nil))
#+end_src
** Project management
#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :bind
  (("C-s" . consult-line)
   ("C-c g" . consult-ripgrep)
   ("C-x b" . consult-buffer)))
#+end_src
** Project navigation
#+begin_src emacs-lisp
(use-package project
  :ensure nil
  :custom
  (project-switch-commands
   '((project-find-file "Find file")
     (consult-ripgrep "Search")
     (magit-status "Magit")
     (project-eshell "Eshell")))
  :config
  (setq project-vc-merge-submodules nil))
#+end_src
** Language Server Protocol
#+begin_src emacs-lisp
;; Eglot dependency
(use-package flymake :ensure t)

(use-package eglot
  :ensure t
  :hook ((python-mode      . eglot-ensure)
         (rust-mode        . eglot-ensure)
         (js-mode          . eglot-ensure)
         (typescript-mode  . eglot-ensure)
         (json-mode        . eglot-ensure)
         (yaml-mode        . eglot-ensure)
         (toml-mode        . eglot-ensure)
         (sh-mode          . eglot-ensure)
         (nix-mode         . eglot-ensure)
         (c-mode           . eglot-ensure)
         (c++-mode         . eglot-ensure))
  :custom
  (eglot-autoshutdown t)
  (eglot-send-changes-idle-time 0.2)
  :config
  (setq-default eglot-server-programs
        '((python-mode     . ("pyright-langserver" "--stdio"))
          (rust-mode       . ("rust-analyzer"))
          (js-mode         . ("typescript-language-server" "--stdio"))
          (typescript-mode . ("typescript-language-server" "--stdio"))
          (web-mode        . ("typescript-language-server" "--stdio"))
          (json-mode       . ("vscode-json-languageserver" "--stdio"))
          (yaml-mode       . ("yaml-language-server" "--stdio"))
          (toml-mode       . ("taplo" "lsp" "stdio"))
          (sh-mode         . ("bash-language-server" "start"))
          (c-mode          . ("clangd"))
          (c++-mode        . ("clangd"))
          (nix-mode        . ("nil")))))

(use-package corfu
  :ensure t
  :custom
  (corfu-auto t)
  (corfu-cycle t)
  (corfu-auto-delay 0.2)
  (corfu-preview-current nil)
  :init
  (global-corfu-mode))
#+end_src

* Denote
#+begin_src emacs-lisp
(use-package denote
  :ensure t
  :hook (dired-mode . denote-dired-mode)
  :bind
  (("C-c n n" . denote)
   ("C-c n r" . denote-rename-file)
   ("C-c n l" . denote-link)
   ("C-c n b" . denote-backlinks)
   ("C-c n d" . denote-dired)
   ("C-c n g" . denote-grep))
  :config
  (setq denote-directory (expand-file-name "~/Documents/work/notes")
	denote-known-keywords nil
	denote-infer-keywords t)
  (add-to-list 'denote-prompts 'template)
  
  ;; Automatically rename Denote buffers when opening them
  (denote-rename-buffer-mode 1))

  ;; Templates
  (setq denote-templates
	'(
	  (none . "") 
	  (philosophy . "* Metadata\n:PROPERTIES:\n:Author:\n:Title:\n:End:\n* Overview\n* Key Ideas\n| Term | Definition |\n* Quotes\n* Chapter Notes\n** Chapter 1:")
	  (literature . "* Metadata\n:PROPERTIES:\n:Author:\n:Title:\n:End:\n* Overview\n* Quotes\n* Chapter Notes\n** Chapter 1:")
	  (physics . "#+SETUPFILE: ~/.dotfiles/emacs/latex/export.org\n#+LATEX_HEADER: \\usepackage{mathtools, cancel, physics, siunitx, mhchem, tikz, bm}\n\n*Metadata\n:PROPERTIES:\n:Author:\n:Title:\n:End:\n* Notes")
	  (mathematics . "#+SETUPFILE: ~/.dotfiles/emacs/latex/export.org\n#+LATEX_HEADER: \\usepackage{mathtools, cancel, tikz, bm}\n\n*Metadata\n:PROPERTIES:\n:Author:\n:Title:\n:End:\n* Notes")
	  (programming . "#+SETUPFILE: ~/.dotfiles/emacs/latex/export.org\n#+LATEX_HEADER: \\usepackage{mathtools, cancel, tikz, bm, listings, courier, tcolorbox}\n\n* Metadata\n:PROPERTIES:\n:Author:\n:Title:\n:End:\n* Notes")
	  ))
#+end_src

* File browsing
#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(use-package marginalia
  :ensure t
  :init (marginalia-mode))
#+end_src

* Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "JetBrainsMono Nerd Font" :height 150 :width 'normal :weight 'extra-light)

;; Makes commented text and keywords italics.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; Adjust line spacing.
(setq-default line-spacing 0.12)
#+end_src

* GUI tweaks
** General
#+begin_src emacs-lisp
;; Disable menubar, toolbars, and scrollbars
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Set frame border
(set-window-margins (selected-window) 1 1)

;; Truncate lines
(global-visual-line-mode 1)

;; Relative line numbers
(setq display-line-numbers-type 'relative) 
(global-display-line-numbers-mode)
#+end_src
** Startup screen
#+begin_src emacs-lisp
(setq initial-scratch-message "")
(setq inhibit-startup-screen t)
#+end_src
** Zooming in and out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* Keybinding completion
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode 1)
  :config
  (setq which-key-inside-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
        which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " → " ))
#+end_src

* LaTeX
** Exporting
#+begin_src emacs-lisp
(setq org-latex-to-pdf-process (list "latexmk %f"))
#+end_src
** Setup
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("org-plain-latex"
	      "\\documentclass{article}
                 [NO-DEFAULT-PACKAGES]
                 [PACKAGES]
                 [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src
** LaTeX modes
#+begin_src emacs-lisp
(use-package cdlatex
  :hook ((LaTeX-mode . org-cdlatex-mode)))

(use-package auctex
  :defer t
  :ensure t)
(global-auto-revert-mode 1)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src
** PDF viewer
#+begin_src emacs-lisp
(use-package pdf-tools
         :demand t
         :init
         (pdf-tools-install))

(add-hook 'pdf-view-mode-hook
	  (lambda () 
	    (display-line-numbers-mode -1) ;; Remove line numbers
	    (blink-cursor-mode -1) ;; Remove cursor blinking
	    (pdf-view-midnight-minor-mode 1))) ;; Dark mode
#+end_src

* Mode line
#+begin_src emacs-lisp
(setq-default
 mode-line-format
 '("%e"
   mode-line-front-space
   ;; Buffer name
   (:eval (propertize "%b" 'face 'mode-line-buffer-id))
   " "
   ;; Read-only or modified flags
   (:eval (cond (buffer-read-only "RO")
                ((buffer-modified-p) "✱")
                (t " ")))
   " "
   ;; Line and column
   "L%l:C%c "
   ;; Percent of buffer
   "[%p] "
   ;; Major mode
   (propertize "%m" 'face 'font-lock-type-face)
   ;; Narrow indicator
   (:eval (when (buffer-narrowed-p) " [Narrow]"))
   ;; Org clock
   (:eval (when (bound-and-true-p org-mode-line-string)
            (concat " " org-mode-line-string)))
   mode-line-end-spaces))
#+end_src

* Sane defaults
** All the icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :if (display-graphic-p)
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
** General
#+begin_src emacs-lisp
;; Indentation and pairing
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
(electric-pair-mode 1)
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(setq org-startup-indented t)

;; Bell deactivation
(setq visible-bell t)
(setq ring-bell-function 'ignore)

;; Backups
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

* Terminal
#+begin_src emacs-lisp
(elpaca 'eat)
(global-set-key (kbd "C-c t") 'eat)
#+end_src

* Text correction
#+begin_src emacs-lisp
(use-package flyspell
  :defer t
  :ensure nil
  :config
  ;; Skip irrelevant regions
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))

  ;; Enable only in selected modes
  (dolist (mode '(
                  mu4e-compose-mode-hook))
    (add-hook mode (lambda () (flyspell-mode 1))))

  ;; Silence startup messages
  (setq flyspell-issue-welcome-flag nil
        flyspell-issue-message-flag nil))
#+end_src

* Theme
#+begin_src emacs-lisp
(require-theme 'modus-themes)
(setq modus-themes-italic-constructs t
      modus-themes-bold-constructs t
      ;;modus-themes-syntax '(alt-syntax)
      modus-themes-hl-line '(intense)
      modus-themes-paren-match '(intense))
(setq modus-vivendi-palette-overrides
      '((bg-main "#0C121D") ;; Background color
          (bg-active "#1E2B40") ;; Mode line
          (bg-mode-line-active "#293952") ;; Mode line
          (bg-mode-line-inactive "#1E2B40") ;; Mode line
          (bg-dim "#0C121D") ;; Same as bg-main
        ))
(setq modus-themes-common-palette-overrides
      `(
	  (bg-line-number-inactive unspecified)
	  (bg-line-number-active unspecified)
	  (border-mode-line-active bg-mode-line-active) ;; Mode line border
          (border-mode-line-inactive bg-mode-line-inactive) ;; Mode line border
	  (bg-prose-block-contents "#090E16") ;; Code block contents
          (bg-prose-block-delimiter "#090E16") ;; Code start/end
          (date-common "#b4f9f8") ;; Timestamps
       ))
(custom-set-faces
 '(org-level-1 ((t (:foreground "#A3C5F1"))))
 '(org-level-2 ((t (:foreground "#6582AA"))))
 '(org-level-3 ((t (:foreground "#b898f4")))))
(load-theme 'modus-vivendi)
#+end_src
