#+Title: GNU Emacs Config
#+AUTHOR: Marc Murray
#+DESCRIPTION: Marc's Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#load-first][LOAD FIRST]]
- [[#elpaca][ELPACA]]
- [[#keybindings][KEYBINDINGS]]
  - [[#evil-mode][Evil Mode]]
  - [[#keybindings-1][Keybindings]]
- [[#code-and-text-correction][CODE AND TEXT CORRECTION]]
  - [[#code][Code]]
  - [[#text][Text]]
- [[#code-completion][CODE COMPLETION]]
- [[#file-browsing][FILE BROWSING]]
- [[#fonts][FONTS]]
- [[#gui-tweaks][GUI TWEAKS]]
  - [[#general][General]]
  - [[#margins][Margins]]
  - [[#startup-screen][Startup Screen]]
  - [[#diminish][Diminish]]
  - [[#zooming-in-and-out][Zooming In And Out]]
- [[#keybinding-completion][KEYBINDING COMPLETION]]
- [[#latex][LaTeX]]
  - [[#exporting][Exporting]]
  - [[#setup][Setup]]
  - [[#latex-modes][LaTeX Modes]]
  - [[#pdf-viewer][PDF Viewer]]
- [[#org-mode][ORG-MODE]]
  - [[#appearance][Appearance]]
  - [[#agenda][Agenda]]
  - [[#table-of-contents][Table Of Contents]]
  - [[#source-code-block-expansion][Source Code Block Expansion]]
- [[#programming-languages][PROGRAMMING LANGUAGES]]
- [[#sane-defaults][SANE DEFAULTS]]
  - [[#all-the-icons][All the Icons]]
  - [[#general-1][General]]
- [[#theme][THEME]]

* LOAD FIRST
#+begin_src emacs-lisp
(setq org-emphasis-regexp-components
  '("-—[:space:]('\"{"
    "-[:space:].,:!?;'\")}\\["
    "[:space:]"
    "."
    1))

(require 'org)
#+end_src

* ELPACA
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Startup
(elpaca elpaca-use-package
 (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))
(elpaca-wait)
(use-package compat)
#+end_src

* KEYBINDINGS
** Evil Mode
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-undo-system 'undo-redo)
  :config
  (evil-mode 1))

;; Unbind motion-state keys that would interfere with custom keybindings (e.g., leader keys)
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)  ;; Unbind spacebar
  (define-key evil-motion-state-map (kbd "RET") nil)  ;; Unbind Return
  (define-key evil-motion-state-map (kbd "TAB") nil)) ;; Unbind Tab

;; EVIL COLLECTION — Vi keybindings across the Emacs ecosystem (Magit, Dired, Eshell, etc.)
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

;; FINE-TUNING EVIL BEHAVIOR (These are global variables, best set early)
(setq
 ;; Use Evil's own search module (not Emacs isearch) — enables `/` to behave as in Vim
 evil-search-module 'evil-search
 ;; Use Vim-style regular expressions for `evil-ex-search`
 evil-ex-search-vim-style-regexp t
 ;; More granular undo points (e.g., inserting `foo` triggers 3 undos: `f`, `o`, `o`)
 evil-want-fine-undo t
 ;; Ensure Evil integrates fully with Emacs core behavior
 evil-want-integration t)
#+end_src
** Keybindings
#+begin_src emacs-lisp
;; Set super key to meta
(setq x-super-keysym 'meta)

;; Proper org-mode-specific keybindings
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "M-h") nil)
  (define-key org-mode-map (kbd "M-h") 'org-do-promote)
  (define-key org-mode-map (kbd "M-j") 'org-move-subtree-down)
  (define-key org-mode-map (kbd "M-k") 'org-move-subtree-up)
  (define-key org-mode-map (kbd "M-l") 'org-do-demote))

(use-package evil-escape
  :ensure t
  :after evil
  :config
  (evil-escape-mode 1)
  (setq evil-escape-key-sequence "jk"))
#+end_src

* CODE AND TEXT CORRECTION
** Code
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer nil
  :hook (after-init . global-flycheck-mode))
#+end_src
** Text
#+begin_src emacs-lisp
(use-package flyspell
  :defer t
  :ensure nil
  :config
  ;; Skip irrelevant regions
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT" . "^#\\+END_EXPORT"))
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))

  ;; Enable only in selected modes
  (dolist (mode '(
                  mu4e-compose-mode-hook))
    (add-hook mode (lambda () (flyspell-mode 1))))

  ;; Silence startup messages
  (setq flyspell-issue-welcome-flag nil
        flyspell-issue-message-flag nil))
#+end_src

* CODE COMPLETION
 #+begin_src emacs-lisp
   (use-package company
    :defer 2
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    :config
    (global-company-mode t)
   :diminish)

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode)
    :diminish)
#+end_src

* FILE BROWSING
#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(use-package marginalia
  :ensure t
  :init (marginalia-mode))
#+end_src

* FONTS
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; Adjust line spacing.
(setq-default line-spacing 0.12)
#+end_src

* GUI TWEAKS
** General
#+begin_src emacs-lisp
;; Disable Menubar, Toolbars and Scrollbars
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Display Line Numbers And Truncated Lines
(require 'display-line-numbers)
(defun display-line-numbers--turn-on ()
  "Turn on `display-line-numbers-mode'."
  (unless (or (minibufferp) (eq major-mode 'pdf-view-mode))
    (display-line-numbers-mode)))

(setq display-line-numbers-type 'relative) 
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src
** Margins
#+begin_src emacs-lisp
(use-package olivetti
  :demand t
  :diminish
  :bind
  (("<f9>" . olivetti-mode))
  :init
  (add-hook 'org-mode-hook (lambda () (olivetti-mode 1)))
  :config
  (setq-default olivetti-body-width 150)
  :diminish)

;; Set frame border
(set-window-margins (selected-window) 1 1)
#+end_src
** Startup Screen
#+begin_src emacs-lisp
(setq initial-scratch-message "")
(setq inhibit-startup-screen t)
#+end_src
** Diminish
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
** Zooming In And Out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* KEYBINDING COMPLETION
#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :ensure t
  :init
  (which-key-mode 1)
  :config
  (setq which-key-inside-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
        which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " → " ))
#+end_src

* LaTeX
** Exporting
#+begin_src emacs-lisp
(setq org-latex-to-pdf-process (list "latexmk %f"))
#+end_src
** Setup
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("org-plain-latex"
	      "\\documentclass{article}
                 [NO-DEFAULT-PACKAGES]
                 [PACKAGES]
                 [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src
** LaTeX Modes
#+begin_src emacs-lisp
(use-package cdlatex
  :hook ((org-mode . org-cdlatex-mode)
         (LaTeX-mode . cdlatex-mode)))

(use-package auctex
  :defer t
  :ensure t)
(global-auto-revert-mode 1)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src
** PDF Viewer
#+begin_src emacs-lisp
(use-package pdf-tools
         :demand t
         :init
         (pdf-tools-install))
#+end_src

* ORG-MODE
** Appearance
#+begin_src emacs-lisp
(setq org-startup-folded t
      org-hide-emphasis-markers t
      org-return-follows-link t)

(use-package org-appear
  :hook (org-mode . org-appear-mode))
#+end_src
** Agenda
#+begin_src emacs-lisp
;; General Settings
(setq org-agenda-span 1
org-agenda-start-day "+0d"
org-agenda-skip-timestamp-if-done t
org-agenda-skip-deadline-if-done t
org-agenda-skip-scheduled-if-done t
org-agenda-skip-scheduled-if-deadline-is-shown t
org-agenda-skip-timestamp-if-deadline-is-shown t)

(setq org-agenda-prefix-format '(
(agenda . "  %?-2i %t ")
 (todo . " %i %-12:c")
 (tags . " %i %-12:c")
 (search . " %i %-12:c")))

(setq org-agenda-hide-tags-regexp ".*")

(setq org-agenda-current-time-string "")
(setq org-agenda-time-grid '((daily) () "" ""))

;; Tags And TODO Keywords
(setq org-tag-persistent-alist '((:startgroup . nil)
                      ("learning" . ?l) ("academics" . ?a)
                      ("business" . ?b) ("practical" . ?p)
                      (:endgroup . nil)
                      ))
(setq org-todo-keywords '((sequence "TODO(t)" "PROJ(p)" "EVNT(e)" "PEND(w)" "|" "DONE(d)")))
#+end_src
** Table Of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
** Source Code Block Expansion
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* PROGRAMMING LANGUAGES
#+begin_src emacs-lisp
;; Emacs Lisp
(use-package elisp-mode
  :ensure nil)

;; Shell
(use-package sh-script
  :ensure nil)

;; Python
(use-package python-mode)

;; Nix
(use-package nix-mode
  :mode "\\.nix\\'")

;; YAML
(use-package yaml-mode
  :mode "\\.ya?ml\\'")

;; JSON
(use-package json-mode
  :mode "\\.json\\'")

;; TOML
(use-package toml-mode
  :mode "\\.toml\\'")

;; Rust
(use-package rust-mode
  :mode "\\.rs\\'")

;; C / C++
(use-package cc-mode
  :ensure nil)

;; Web: HTML / CSS / JS / JSX / TSX
(use-package web-mode
  :mode ("\\.html\\'" "\\.css\\'" "\\.js\\'" "\\.jsx\\'" "\\.tsx\\'")
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2))

;; Emmet – fast HTML/CSS typing
(use-package emmet-mode
  :hook (web-mode css-mode))

;; SQL
(use-package sql
  :ensure nil)
#+end_src

* SANE DEFAULTS
** All the Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :if (display-graphic-p)
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
** General
#+begin_src emacs-lisp
;; Indentation and pairing
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
(electric-pair-mode 1)
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(setq org-startup-indented t)

;; Bell deactivation
(setq visible-bell t)
(setq ring-bell-function 'ignore)

;; Backups
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

;; Minibuffer escape
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* THEME
#+begin_src emacs-lisp
(require-theme 'modus-themes)
(setq modus-themes-italic-constructs t
      modus-themes-bold-constructs t
      ;;modus-themes-syntax '(alt-syntax)
      modus-themes-hl-line '(intense)
      modus-themes-paren-match '(intense))
(setq modus-themes-headings
      (quote ((1 . (overline variable-pitch 1.3))
              (2 . (variable-pitch 1.15))
              (3 . (1.05))
              (t . (monochrome)))))
(setq modus-vivendi-palette-overrides
      '((bg-main "#2e3440") ;; Background color
          (bg-active "#616E87") ;; Mode line
          (bg-mode-line-active "#616E87") ;; Mode line
          (bg-mode-line-inactive "#616E87") ;; Mode line
          (bg-dim "#2E3440") ;; Code blocks
        ))
(setq modus-themes-common-palette-overrides
      `(
	  (bg-line-number-inactive unspecified)
	  (bg-line-number-active unspecified)
	  (border-mode-line-active bg-mode-line-active) ;; Mode line border
          (border-mode-line-inactive bg-mode-line-inactive) ;; Mode line border
	  (bg-prose-block-contents "#424C5E") ;; Code block contents
          (bg-prose-block-delimiter "#3B4252") ;; Code start/end
       ))
(load-theme 'modus-vivendi)
#+end_src
